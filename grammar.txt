# There is no place in the Lox grammer where either a statement _or_ an
# expression is allowed; the two syntaxes are disjoint (except for, possibly,
# in the initializer of a `for` statement).

# Updated grammer avoids ambiguity by enforcing precedence rules, by design.
# Each rule in the grammer below creates a new level of precedenceâ€”with earlier
# rules taking a lower leve of precedence compared to later rules. The `primary`
# rule (bottom) is the rule with highest precedence.

program 		-> declaration* EOF ;

#
# Declaration rules.
#

declaration 	-> funcDeclaration
				   | varDeclaration
				   | statement ;

funcDeclaration 	-> "fun" function ;

function 		-> IDENTIFIER "(" parameters? ")" block ;

parameters 		-> IDENTIFIER ( "," IDENTIFIER )* ;

varDeclaration  -> "var" IDENTIFIER ( "=" expression )? ";" ;

#
# Statement rules.
#

statement 		-> exprStatement
				   | forStatement
				   | ifStatement
				   | printStatement
				   | returnStatement
				   | whileStatement
				   | block ;

exprStatement  	-> expression ";" ;

// Consists of optional initializer, optional condition, and optional increment.
forStatement 	-> "for" "(" ( varDeclaration | exprStatement | ";" )
					expression? ";"
					expression ")" statement ;

ifStatement 	-> "if" "(" expression ")" statement
				   ( "else" statement)? ;

printStatement  -> "print" expression ";" ;

returnStatement  -> "return" expression? ";" ;

whileStatement 	-> "while" "(" expression ")" statement ;

block 			-> "{" declaration* "}"

#
# Expression rules.
#

# Non-recursive.
expression 		-> assignment ;

# Right-associative, right-recursive.
assignment 		-> IDENTIFIER "=" assignment ;
				   | logic_or ;

logic_or 		-> logic_and ( "or" logic_and )* ;

logic_and 		-> equality ( "and" equality )* ;

# Left-associative, non-recursive.
equality 		-> comparison ( ("==" | "!=") comparison )* ;

# Left-associative, non-recursive.
comparison 		-> term ( (">" | ">=" | "<" | "<=") term )* ;

# Left-associative, non-recursive.
term 			-> factor ( ("-" | "+") factor )* ;

# Left-associative, non-recursive.
factor 			-> unary ( ("/" | "*") unary )* ;

# Right-associative, right-recursive.
unary 			-> ("!" | "-") unary | call
				   | primary;

call 			-> primary ( "(" arguments? ")" )* ;

arguments 		-> expression ( "," expression )* ;

# Non-recursive (for literals and parenthesized expressions).
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
				   | "(" expression ")"
				   | IDENTIFIER;
