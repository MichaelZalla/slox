# Updated grammer avoids ambiguity by enforcing precedence rules, by design.
# Each rule in the grammer below creates a new level of precedenceâ€”with earlier
# rules taking a lower leve of precedence compared to later rules. The `primary`
# rule (bottom) is the rule with highest precedence.

# Non-recursive.
expression 		-> equality ;

# Left-associative, non-recursive.
equality 		-> comparison ( ("==" | "!=") comparison )* ;

# Left-associative, non-recursive.
comparison 		-> term ( (">" | ">=" | "<" | "<=") term )* ;

# Left-associative, non-recursive.
term 			-> factor ( ("-" | "+") factor )* ;

# Left-associative, left-recursive; poses problems for some parsing techniques.
#
# factor 			-> factor ("/" | "*") unary
#			           | unary ;

# Left-associative, non-recursive.
factor 			-> unary ( ("/" | "*") unary )* ;

# Right-associative, right-recursive.
unary 			-> ("!" | "-") unary
				   | primary;

# Non-recursive (for literals and parenthesized expressions).
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
				   | "(" expression ")" ;
